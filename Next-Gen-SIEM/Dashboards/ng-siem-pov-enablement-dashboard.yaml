name: NG-SIEM POV Enablement Dashboard v2
updateFrequency: never
timeSelector: {}
sharedTimeInterval:
  enabled: true
  isLive: false
  start: 1d
widgets:
  6ba8f44f-0bd2-41c3-9db8-016f34e89e30:
    x: 4
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/Detection/
              | #event_simpleName!=DetectionExcluded
              | severity!="informational"
              | #event.kind:="alert"
              | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
             | #event.kind="alert" ;
      }

      // Group the results by #Vendor.
      | groupby(#Vendor, limit=max)
    end: now
    start: 1d
    width: 4
    y: 3
    interactions:
    - conditions: null
      name: filterClick
      titleTemplate: '{{ fields.#Vendor }}'
      queryString: "// Suggested go to events query - may be incorrect for complex\
        \ queries \n#type=/-ecs($|-)|^falcon-raw-data$/|case { #type=falcon-raw-data|#event_simpleName=/Detection/|#event_simpleName!=DetectionExcluded|severity!=\"\
        informational\"|#event.kind := \"alert\"|#Vendor := \"crowdstrike\";#type!=falcon-raw-data|#event.kind=\"\
        alert\"} | #Vendor=?_Vendor "
      useWidgetTimeWindow: true
      repoOrViewName:
      arguments:
        _Vendor: '["{{fields.#Vendor}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      enableTrellis: false
      legendPosition: right
      series: {}
      withLegendTitle: false
    visualization: pie-chart
    title: Total Alerts by Vendor
    isLive: false
    type: query
  de526ba2-2994-48ab-b5fa-7f3a8f8eeee6:
    x: 8
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/^(DnsRequest|TlsClientHello)/
              | source.ip:=LocalAddressIP4
              | destination.ip:=RemoteAddressIP4
              | destination.port:=RemotePort
              | #Vendor:="crowdstrike"
              | dns.domainName:=DomainName ;
          #type!=falcon-raw-data
              | url.domain=*
              | dns.domainName:=url.domain ;
          #type!=falcon-raw-data
              | source.domain=*
              | dns.domainName:=source.domain ;
          #type!=falcon-raw-data
              | dns.question.name=*
              | dns.domainName:=dns.question.name ;
      }

      // Filter for Internet DNS names.
      | dns.domainName=/^([a-z0-9]|\.).*?\./i
      | dns.domainName!=/\.(internal|local|amazonaws\.com|cloudsink\.net|cloudfront\.net|googlesyndication\.com|footprintdns\.com|azure\.com|live\.com)$/i
      | dns.domainName!=/_/i

      // Check entropy.
      | shannonEntropy(dns.domainName)
      | _shannonentropy>4.2

      // Round to 1 decimal place.
      | dns.entropy:=format("%.1f", field=_shannonentropy)

      // Extract the TLD with another regex.
      | dns.domainName=/\.(?<dns.tld>[a-z0-9-]+?\.[a-z0-9]+?)$/

      // Display the top TLDs.
      | top(dns.tld, limit=10)
    end: now
    start: 30d
    width: 4
    y: 35
    interactions:
    - conditions: null
      name: filterClick
      titleTemplate: '{{ fields.dns.tld }}'
      queryString: "// Suggested go to events query - may be incorrect for complex\
        \ queries \ncase { #type=falcon-raw-data|#event_simpleName=/^(DnsRequest|TlsClientHello)/|source.ip\
        \ := LocalAddressIP4|destination.ip := RemoteAddressIP4|destination.port :=\
        \ RemotePort|#Vendor := \"crowdstrike\"|dns.domainName := DomainName;#type!=falcon-raw-data|url.domain=*|dns.domainName\
        \ := url.domain;#type!=falcon-raw-data|source.domain=*|dns.domainName := source.domain;#type!=falcon-raw-data|dns.question.name=*|dns.domainName\
        \ := dns.question.name}|dns.domainName=/^([a-z0-9]|\\.).*?\\./i|dns.domainName!=/\\\
        .(internal|local|amazonaws\\.com|cloudsink\\.net|cloudfront\\.net|googlesyndication\\\
        .com|footprintdns\\.com|azure\\.com|live\\.com)$/i|dns.domainName!=/_/i|shannonEntropy(dns.domainName)|_shannonentropy>4.2|format(\"\
        %.1f\",field=_shannonentropy,as=dns.entropy)|dns.domainName=/\\.(?<dns.tld>[a-z0-9-]+?\\\
        .[a-z0-9]+?)$/ | dns.tld=?dns_tld "
      useWidgetTimeWindow: true
      repoOrViewName:
      arguments:
        dns_tld: '["{{fields.dns.tld}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      legendPosition: right
      series: {}
    visualization: pie-chart
    title: High Entropy - TLDs
    isLive: false
    type: query
  e56a243e-390f-43d7-a37a-5cd59319785c:
    x: 7
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/Detection/
              | #event_simpleName!=DetectionExcluded
              | severity!="informational"
              | #event.kind:="alert"
              | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
             | #event.kind="alert" ;
      }

      // Build a timechart based on the vendor.
      | timechart(#Vendor, limit=20)
    end: now
    start: 1d
    width: 5
    y: 7
    interactions:
    - conditions: null
      name: filterClick
      titleTemplate: '{{ fields.#Vendor }}'
      queryString: "// Suggested go to events query - may be incorrect for complex\
        \ queries \n#type=/-ecs($|-)|^falcon-raw-data$/|case { #type=falcon-raw-data|#event_simpleName=/Detection/|#event_simpleName!=DetectionExcluded|severity!=\"\
        informational\"|#event.kind := \"alert\"|#Vendor := \"crowdstrike\";#type!=falcon-raw-data|#event.kind=\"\
        alert\"} | #Vendor=?_Vendor"
      useWidgetTimeWindow: true
      repoOrViewName:
      arguments:
        _Vendor: '["{{fields.#Vendor}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      series: {}
      gradient: false
      interpolation: step-after
      showDataPoints: false
      connect-points: false
      stacking: none
      yAxisScale: linear
      plotType: area
      regression: false
      imputation: none
    visualization: time-chart
    title: Alerts by Vendor Over Time
    isLive: false
    type: query
  12c3ee21-5f64-483e-bfbb-e61a848e2c77:
    x: 0
    backgroundColor: '#242526'
    y: 3
    height: 18
    text: |-
      This section provides example queries around alerts for first- and third-party data, specifically `#event.type=alert`. That event type if part of CPS and allows you to quickly identify alerts in your data.

      Example: find all alerts across email, proxy, and endpoint.
    width: 2
    title: Alert Queries
    type: note
  note-1725887215771-0:
    x: 2
    backgroundColor: '#242526'
    y: 0
    height: 3
    text: "This dashboard is built for threat hunting using [CrowdStrike Parsing Standard](https://library.humio.com/logscale-parsing-standard/pasta.html).\
      \ \n\n1. Import into the `All` view. \n2. Each widget contains a query designed\
      \ to showcase the flexibility of CQL and dashboard widgets. \n3. Click on the\
      \ widget title to view the query that powers the widget.\n4. Each query contains\
      \ comments to explain what the query does. "
    width: 8
    title: Instructions
    type: note
  987bb4eb-028e-4f66-b773-a12a05f1d1c4:
    x: 0
    backgroundColor: '#242526'
    y: 35
    height: 4
    text: "This section demonstrates the use of the [shannonEntropy](https://library.humio.com/data-analysis/functions-shannonentropy.html)\
      \ function. This can be applied to any field and returns the entropy value.\
      \ A high value generally translates to unique values. \n\nExample: apply the\
      \ function to DNS to look for unique domains. "
    width: 2
    title: Entropy Functon
    type: note
  note-1725900646032-0:
    x: 0
    backgroundColor: '#242526'
    y: 27
    height: 8
    text: "This section demonstrates the use of the [ioc:lookup](https://library.humio.com/data-analysis/functions-ioc-lookup.html)\
      \ function. This can be applied to IPs, domains, and URLs for both first- and\
      \ third-party data.\n\nExample: apply CrowdStrike's intelligence to your proxy\
      \ or firewall logs. \n\n**Note**: values in red will link directly to Falcon\
      \ Indicator Graph or the CAO threat actor profile. "
    width: 2
    title: IOC Queries
    type: note
  57a44bcb-2491-40a2-8eb4-26017140d65d:
    x: 2
    height: 5
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/Detection/
              | #event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/
              | severity!="informational"
              | #event.kind:="alert"
              | threat.tactic.name[0]:=Tactic
              | threat.technique.name[0]:=Technique
              | threat.technique.name[0]=/./
              | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
              | #event.kind="alert" ;
      }

      // Get the top vendor and tactic combinations.
      | top([#Vendor, threat.tactic.name[0]], limit=15)

      // Create a sankey from the results.
      | sankey(source=#Vendor, target=threat.tactic.name[0], weight=count(threat.tactic.name[0], distinct=true))
    visualization: sankey
    end: now
    start: 1d
    width: 5
    y: 11
    interactions:
    - conditions: null
      name: filterClick
      titleTemplate: '{{ fields.source }}, {{ fields.target }}'
      queryString: "// Suggested go to events query - may be incorrect for complex\
        \ queries \n#type=/-ecs($|-)|^falcon-raw-data$/|case { #type=falcon-raw-data|#event_simpleName=/Detection/|#event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/|severity!=\"\
        informational\"|#event.kind := \"alert\"|threat.tactic.name[0] := Tactic|threat.technique.name[0]\
        \ := Technique|threat.technique.name[0]=/./|#Vendor := \"crowdstrike\";#type!=falcon-raw-data|#event.kind=\"\
        alert\"} | threat.tactic.name[0]=?threat_tactic_name_0_ #Vendor=?_Vendor "
      useWidgetTimeWindow: true
      repoOrViewName:
      arguments:
        _Vendor: '["{{ fields.source }}"]'
        threat_tactic_name_0_: '["{{ fields.target }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    title: Alerts - Vendor to Tactic - Most Frequent
    isLive: false
    type: query
  b6ed9d1a-d340-45d7-93f2-5b75d384d66c:
    x: 8
    y: 3
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/Detection/
              | #event_simpleName!=DetectionExcluded
              | severity!="informational"
              | #event.kind:="alert"
              | #Vendor:="crowdstrike"
              | destination.ip:=RemoteAddressIP4
              | source.ip:=LocalAddressIP4 ;
          #type!=falcon-raw-data
             | #event.kind="alert" ;
      }

      // Check to ensure the IP exists and it's routable.
      | case {
          destination.ip=*
              | !cidr(destination.ip, subnet=["224.0.0.0/4", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "127.0.0.0/8", "169.254.0.0/16", "0.0.0.0/32", "::/0"])
              | mapIp:=destination.ip ;
          aip=*
              | !cidr(aip, subnet=["224.0.0.0/4", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "127.0.0.0/8", "169.254.0.0/16", "0.0.0.0/32", "::/0"])
              | mapIp:=aip ;
          source.ip=*
              | !cidr(source.ip, subnet=["224.0.0.0/4", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "127.0.0.0/8", "169.254.0.0/16", "0.0.0.0/32", "::/0"])
              | mapIp:=source.ip ;
      }

      // Map out the results.
      | worldMap(ip=mapIp)
    end: now
    start: 1d
    width: 4
    options:
      zLevel: 0.4
    visualization: world-map
    title: World Map of Alert IPs
    isLive: false
    type: query
  d4487ff0-b9c0-49cc-82f2-bd8d6caaab40:
    x: 10
    y: 0
    height: 3
    queryString: |-
      // Read the CSV and count.
      readFile("aid_master_main.csv")
      | count()
    end: now
    start: 1d
    width: 2
    options:
      background-color: '#242526'
      default: {}
    visualization: single-value
    title: Agent ID Count
    isLive: false
    type: query
  692ee352-4067-4414-939a-c66985e8bd6b:
    x: 0
    backgroundColor: '#242526'
    y: 39
    height: 8
    text: 'This section shows failed logins across all data types. The data has been
      enriched to include GeoIP and ASN details. '
    width: 2
    title: Failed Logins
    type: note
  0cf0fe05-224f-49e4-88fa-f8139b045881:
    x: 2
    y: 35
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/^(DnsRequest|TlsClientHello)/
              | source.ip:=LocalAddressIP4
              | destination.ip:=RemoteAddressIP4
              | destination.port:=RemotePort
              | #Vendor:="crowdstrike"
              | dns.domainName:=DomainName ;
          #type!=falcon-raw-data
              | url.domain=*
              | dns.domainName:=url.domain ;
          #type!=falcon-raw-data
              | source.domain=*
              | dns.domainName:=source.domain ;
          #type!=falcon-raw-data
              | dns.question.name=*
              | dns.domainName:=dns.question.name ;
      }

      // Filter for Internet DNS names.
      | dns.domainName=/^([a-z0-9]|\.).*?\./i
      | dns.domainName!=/\.(internal|local|amazonaws\.com|cloudsink\.net|cloudfront\.net|googlesyndication\.com|footprintdns\.com|azure\.com|live\.com)$/i
      | dns.domainName!=/_/i

      // Check entropy.
      | shannonEntropy(dns.domainName)
      | _shannonentropy>4.2

      // Round to 1 decimal place.
      | dns.entropy:=format("%.1f", field=_shannonentropy)

      // Format the output.
      | groupby([#Vendor, dns.domainName, dns.entropy], function=count(as=count), limit=max)
      | sort(dns.entropy, limit=20000)
    end: now
    start: 1d
    width: 6
    options:
      cell-overflow: wrap-text
      configured-columns:
        ioc.malwareName:
          render-as: go_to_events_link
        '#Vendor':
          render-as: go_to_events_link
        source.ip:
          render-as: go_to_events_link
        ioc.actorName:
          render-as: go_to_events_link
        dns.domainName:
          render-as: go_to_events_link
      row-numbers-enabled: false
    visualization: table-view
    title: High Entropy DNS Domains
    isLive: false
    type: query
  4d157e50-d35e-43ac-98ab-bd5415a4192d:
    x: 2
    y: 3
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/Detection/
              | #event_simpleName!=DetectionExcluded
              | severity!="informational"
              | #event.kind:="alert"
              | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
             | #event.kind="alert" ;
      }

      // Count the total number of alerts.
      | count()
    end: now
    start: 1d
    width: 2
    options:
      default: {}
    visualization: single-value
    title: Total Alerts
    isLive: false
    type: query
  92b7b703-b9e6-43c3-b5bb-02b3c5f3fee5:
    x: 2
    y: 39
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/UserLogonFailed/
              | #Vendor:="crowdstrike"
              | client.ip:=aip
              | user.name:=UserName
              | #event.module:="sso"
              | event.reason:=Technique ;
          #type!=falcon-raw-data
              | #event.outcome=failure
              | #event.module=sso
      }

      // Enrich the source IP.
      | client.ip=*
      | ipLocation(client.ip)
      | asn(client.ip)

      // Ensure the user.name exists.
      | user.name=/./
      | user.name!=/^(-)$/i

      | groupby([#Vendor, user.name, client.ip, event.reason, client.ip.country, client.ip.city, client.ip.org], function=count(as=count), limit=max)
      | sort(count, limit=20000)
    end: now
    start: 1d
    width: 10
    options:
      cell-overflow: wrap-text
      configured-columns:
        client.ip:
          render-as: go_to_events_link
        user.name:
          render-as: go_to_events_link
          width: 298
      row-numbers-enabled: false
    visualization: table-view
    title: Authentication Failures - Details
    isLive: false
    type: query
  fa99cb2b-02a9-434e-b922-99f76f082229:
    x: 2
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/UserLogonFailed/
              | #Vendor:="crowdstrike"
              | client.ip:=aip
              | user.name:=UserName
              | #event.module:="sso"
              | event.reason:=Technique ;
          #type!=falcon-raw-data
              | #event.outcome=failure
              | #event.module=sso
      }

      // Enrich the source IP.
      | client.ip=*
      | ipLocation(client.ip)
      | asn(client.ip)

      // Ensure the user.name exists.
      | user.name=/./
      | user.name!=/^(-)$/i

      | groupby(event.reason, limit=max)
    end: now
    start: 1d
    width: 4
    y: 43
    interactions:
    - conditions: null
      name: filterClick
      titleTemplate: '{{ fields.event.reason }}'
      queryString: "// Suggested go to events query - may be incorrect for complex\
        \ queries \ncase { #type=falcon-raw-data|#event_simpleName=/UserLogonFailed/|#Vendor\
        \ := \"crowdstrike\"|client.ip := aip|user.name := UserName|#event.module\
        \ := \"sso\"|event.reason := Technique;#type!=falcon-raw-data|#event.outcome=failure|#event.module=sso}|client.ip=*|ipLocation(client.ip)|asn(client.ip)|user.name=/./|user.name!=/^(-)$/i\
        \ | event.reason=?event_reason "
      useWidgetTimeWindow: true
      repoOrViewName:
      arguments:
        event_reason: '["{{fields.event.reason}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      innerRadius: 50
      legendPosition: right
      series: {}
      withLegendTitle: false
    visualization: pie-chart
    title: Authentication Failures - Reason
    isLive: false
    type: query
  b3427008-ad73-4cee-9411-0536dbb67e03:
    x: 2
    y: 31
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/^(Network|HTTP|Tls|User|DCS|Smb|Wmi|Command|Directory)|(BindIP)/
              | (LocalAddressIP4=* OR RemoteAddressIP4=*)
              | source.ip:=LocalAddressIP4
              | destination.ip:=RemoteAddressIP4
              | destination.port:=RemotePort
              | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
              | (source.ip=* OR destination.ip=*);
      }

      // These case statements check to make sure the field exists, then enriches anything with an Internet-routable IP address.
      | case {
          source.ip=*
              | !cidr(source.ip, subnet=["224.0.0.0/4", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "127.0.0.0/8", "169.254.0.0/16", "0.0.0.0/32", "::/0"])
              | ioc:lookup(source.ip, type="ip_address", confidenceThreshold=unverified, strict=false)
              | ipLocation(source.ip) ;
          * ;
      }

      | case {
          destination.ip=*
              | !cidr(destination.ip, subnet=["224.0.0.0/4", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "127.0.0.0/8", "169.254.0.0/16", "0.0.0.0/32", "::/0"])
              | ioc:lookup(destination.ip, type="ip_address", confidenceThreshold=unverified, strict=false)
              | ipLocation(destination.ip) ;
          * ;
      }

      // Look for anything with an IOC label, then extract fields.
      | ioc[0].labels=*
      | regex("(^|,)((?<ioc.actorName>Actor\/.*?),|(?<ioc.malwareName>Malware\/.*?),)", field=ioc[0].labels, strict=false)
      | regex("(^|,)(Vulnerability\/(?<ioc.CVE>.*?)(,|$))", field=ioc[0].labels, strict=false)

      | case {
          ioc.actorName=*
              | regex("^Actor\/(?<ioc.actorName.firstName>.*?)(?<ioc.actorName.lastName>(SPIDER|PANDA|BEAR|KITTEN|CHOLLIMA|TIGER|JACKAL))$", field=ioc.actorName, strict=false)
              | ioc.actorName.firstName:=lower(ioc.actorName.firstName)
              | ioc.actorName.lastName:=lower(ioc.actorName.lastName)
              | ioc.actorName:=format("[%s](/intelligence-v2/actors/%s-%s)", field=[ioc.actorName, ioc.actorName.firstName, ioc.actorName.lastName]) ;
          * ;
      }

      // Set default values to keep the results consistent.
      | default(field=[#Vendor, source.ip, source.ip.country, destination.ip, destination.port, destination.ip.country, ioc.malwareName, ioc.CVE], value="-")

      // Format the URLs.
      | ioc[0].indicator:=format("[%s](/intelligence/graph?indicators=ip:'%s'&selectedIndicator=%s)", field=[ioc[0].indicator, ioc[0].indicator, ioc[0].indicator])

      // Group the results together.
      | groupby([#Vendor, source.ip, destination.ip, destination.port, destination.ip.country, ioc[0].indicator, ioc.actorName, ioc.malwareName, ioc[0].malicious_confidence, ioc.CVE], limit=max)

      // Rename fields for readability.
      | rename(field=[[ioc[0].indicator, ioc.ip], [ioc[0].malicious_confidence, ioc.confidence], [destination.ip.country, country], [_count, count]])

      // Sort the results.
      | sort(count, limit=20000)
    end: now
    start: 1d
    width: 10
    options:
      cell-overflow: wrap-text
      configured-columns:
        ioc.ip:
          color: '#F0424266'
        '#Vendor':
          render-as: value
        ioc.actorName:
          color:
            conditions:
            - color: '#F0424233'
              condition:
                arg: ''
                type: Present
          render-as: link
        source.ip:
          render-as: value
        destination.ip:
          render-as: value
        ioc.malwareName:
          render-as: value
        ioc.CVE:
          render-as: value
      row-numbers-enabled: false
    visualization: table-view
    title: IOC Matches - IP
    isLive: false
    type: query
  422e0b37-a2cc-4f9a-97d7-e8fb9cbd48b2:
    x: 7
    height: 5
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/Detection/
              | #event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/
              | severity!="informational"
              | #event.kind:="alert"
              | threat.tactic.name[0]:=Tactic
              | threat.technique.name[0]:=Technique
              | threat.technique.name[0]=/./
              | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
              | #event.kind="alert" ;
      }

      // Get the top vendor and technique combinations.
      | top([threat.tactic.name[0], threat.technique.name[0]], limit=15)

      // Create a sankey from the results.
      | sankey(source=threat.tactic.name[0], target=threat.technique.name[0], weight=count(threat.technique.name[0], distinct=true))
    visualization: sankey
    end: now
    start: 1d
    width: 5
    y: 11
    interactions:
    - conditions: null
      name: filterClick
      titleTemplate: '{{ fields.source }}, {{ fields.target }}'
      queryString: "// Suggested go to events query - may be incorrect for complex\
        \ queries \n#type=/-ecs($|-)|^falcon-raw-data$/|case { #type=falcon-raw-data|#event_simpleName=/Detection/|#event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/|severity!=\"\
        informational\"|#event.kind := \"alert\"|threat.tactic.name[0] := Tactic|threat.technique.name[0]\
        \ := Technique|threat.technique.name[0]=/./|#Vendor := \"crowdstrike\";#type!=falcon-raw-data|#event.kind=\"\
        alert\"} | threat.technique.name[0]=?threat_technique_name_0_ threat.tactic.name[0]=?threat_tactic_name_0_ "
      useWidgetTimeWindow: true
      repoOrViewName:
      arguments:
        threat_tactic_name_0_: '["{{ fields.source }}"]'
        threat_technique_name_0_: '["{{ fields.target }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    title: Alerts - Tactic to Technique - Most Frequent
    isLive: false
    type: query
  note-1725902925766-0:
    x: 0
    backgroundColor: '#242526'
    y: 21
    height: 6
    text: "This query displays hosts with multiple detection types. These can be used\
      \ to create ad-hoc incidents and demonstrate the power of the Next-Gen SIEM\
      \ workbench. \n\n1. Click on the `agent.id` you would like to view. This will\
      \ open a query in this window. \n2. Click \"Create one-time incident\" after\
      \ the results load. \n3. Pivot to the workbench to view the incident. Please\
      \ note the incident may take a minute to get created. \n\n**Note**: values in\
      \ red will link directly to a Falcon summary view."
    width: 2
    title: Incident Creation
    type: note
  020a3b23-8ea8-4e85-a8ef-5b35026fdfc4:
    x: 2
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/Detection/
              | #event_simpleName!=DetectionExcluded
              | severity!="informational"
              | #event.kind:="alert"
              | #Vendor:="crowdstrike"
              | lower(Tactic, as=event.category) ;
          #type!=falcon-raw-data
             | #event.kind="alert" ;
      }

      // Spit any of the event.category[] values into individual values, then ensure a value exists.
      | split(event.category)
      | event.category=/./

      // Find the top 10 event categories.
      | top(event.category, limit=10)
    end: now
    start: 1d
    width: 5
    y: 7
    interactions:
    - conditions: null
      name: filterClick
      titleTemplate: '{{ fields.event.category }}'
      queryString: "// Suggested go to events query - may be incorrect for complex\
        \ queries \n#type=/-ecs($|-)|^falcon-raw-data$/|case { #type=falcon-raw-data|#event_simpleName=/Detection/|#event_simpleName!=DetectionExcluded|severity!=\"\
        informational\"|#event.kind := \"alert\"|#Vendor := \"crowdstrike\"|lower(Tactic,as=event.category);#type!=falcon-raw-data|#event.kind=\"\
        alert\"}|split(event.category)|event.category=/./ | event.category=?event_category "
      useWidgetTimeWindow: true
      repoOrViewName:
      arguments:
        event_category: '["{{fields.event.category}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      legendPosition: right
      series: {}
    visualization: pie-chart
    title: Top Alerts by Category
    isLive: false
    type: query
  note-1725565030439-0:
    x: 0
    backgroundColor: '#242526'
    y: 0
    height: 3
    text: |-
      ```
      date: 2024-09-10
      version: 1.1.0
      ```
    width: 2
    title: Details
    type: note
  e2f5106a-a03e-49f4-b23a-416d6ff85fbc:
    x: 2
    y: 27
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/^(DnsRequest|TlsClientHello)/
              | source.ip:=LocalAddressIP4
              | destination.ip:=RemoteAddressIP4
              | destination.port:=RemotePort
              | #Vendor:="crowdstrike"
              | dns.domainName:=DomainName ;
          #type!=falcon-raw-data
              | url.domain=*
              | dns.domainName:=url.domain ;
          #type!=falcon-raw-data
              | source.domain=*
              | dns.domainName:=source.domain ;
          #type!=falcon-raw-data
              | dns.question.name=*
              | dns.domainName:=dns.question.name ;
      }

      // Search for IOCs.
      | ioc:lookup(dns.domainName, type="domain", confidenceThreshold=unverified, strict=true)
      | ioc[0].labels!=/DomainType\/KnownGood/i

      // Extract fields from the IOCs.
      | ioc[0].labels=*
      | regex("(^|,)((?<ioc.actorName>Actor\/.*?),|(?<ioc.malwareName>Malware\/.*?),)", field=ioc[0].labels, strict=false)
      | regex("(^|,)(Vulnerability\/(?<ioc.CVE>.*?)(,|$))", field=ioc[0].labels, strict=false)

      | case {
          ioc.actorName=*
              | regex("^Actor\/(?<ioc.actorName.firstName>.*?)(?<ioc.actorName.lastName>(SPIDER|PANDA|BEAR|KITTEN|CHOLLIMA|TIGER|JACKAL))$", field=ioc.actorName, strict=false)
              | ioc.actorName.firstName:=lower(ioc.actorName.firstName)
              | ioc.actorName.lastName:=lower(ioc.actorName.lastName)
              | ioc.actorName:=format("[%s](/intelligence-v2/actors/%s-%s)", field=[ioc.actorName, ioc.actorName.firstName, ioc.actorName.lastName]) ;
          * ;
      }

      // Set default values to keep the results consistent.
      | default(field=[#Vendor, source.ip, dns.domainName, ioc.malwareName, ioc.CVE], value="-")

      // Format for URL linking.
      | dns.domainName:=format("[%s](/intelligence/graph?indicators=domain:%s&selectedIndicator=%s)", field=[dns.domainName, dns.domainName, dns.domainName])

      // Group the results together.
      | groupby([#Vendor, source.ip, dns.domainName, ioc.actorName, ioc.malwareName, ioc[0].malicious_confidence, ioc.CVE], limit=max)

      // Rename fields for readability.
      | rename(field=[[ioc[0].malicious_confidence, ioc.confidence], [destination.ip.country, country], [_count, count]])

      // Sort the results.
      | sort(count, limit=20000)
    end: now
    start: 30d
    width: 10
    options:
      cell-overflow: wrap-text
      configured-columns:
        ioc.malwareName:
          render-as: value
        '#Vendor':
          render-as: value
        source.ip:
          render-as: value
        ioc.actorName:
          color:
            conditions:
            - color: '#F0424233'
              condition:
                arg: ''
                type: Present
          render-as: link
        dns.domainName:
          color: '#F0424266'
          render-as: link
      row-numbers-enabled: false
    visualization: table-view
    title: IOC Matches - DNS
    isLive: false
    type: query
  f9ac01a4-3c19-48b6-ab3b-55bd1d0db515:
    x: 6
    height: 4
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/UserLogonFailed/
              | #Vendor:="crowdstrike"
              | client.ip:=aip
              | user.name:=UserName
              | #event.module:="sso"
              | event.reason:=Technique ;
          #type!=falcon-raw-data
              | #event.outcome=failure
              | #event.module=sso
      }

      // Enrich the source IP.
      | client.ip=*
      | ipLocation(client.ip)
      | asn(client.ip)

      // Ensure the user.name exists.
      | user.name=/./
      | user.name!=/^(-)$/i

      // Visualize the results.
      | timechart(client.ip.country, limit=20)
    end: now
    start: 1d
    width: 6
    y: 43
    interactions:
    - conditions: null
      name: filterClick
      titleTemplate: '{{ fields.client.ip.country }}'
      queryString: "// Suggested go to events query - may be incorrect for complex\
        \ queries \ncase { #type=falcon-raw-data|#event_simpleName=/UserLogonFailed/|#Vendor\
        \ := \"crowdstrike\"|client.ip := aip|user.name := UserName|#event.module\
        \ := \"sso\"|event.reason := Technique;#type!=falcon-raw-data|#event.outcome=failure|#event.module=sso}|client.ip=*|ipLocation(client.ip)|asn(client.ip)|user.name=/./|user.name!=/^(-)$/i\
        \ | client.ip.country=?client_ip_country "
      useWidgetTimeWindow: true
      repoOrViewName:
      arguments:
        client_ip_country: '["{{fields.client.ip.country}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      connect-points: false
      imputation: none
    visualization: time-chart
    title: Authentication Failures - Source Country
    isLive: false
    type: query
  1648bf3c-b982-4b6c-a381-4e4b8b2f92ac:
    x: 2
    height: 6
    queryString: |-
      // Identify events with NG-SIEM indicators.
      #type=none
      | Ngsiem.detection.id=*

      // Exclude correlation rules, which we'll have to handle separately.
      | Ngsiem.event.type!="ngsiem-rule-match-event"

      // Grab enrichment data.
      | match(file="aid_master_main.csv", field=[aid], column=[aid], include=[aid, ComputerName, LocalAddressIP4], strict=false)
      | match(file="aid_master_main.csv", field=[agent.id], column=[aid], include=[aid, ComputerName, LocalAddressIP4], strict=false)
      | match(file="aid_master_main.csv", field=[ComputerName], column=[ComputerName], include=[aid, ComputerName, LocalAddressIP4], strict=false)
      | match(file="aid_master_main.csv", field=[source.ip], column=[LocalAddressIP4], include=[aid, ComputerName, LocalAddressIP4], strict=false)
      | match(file="aid_master_main.csv", field=[destination.ip], column=[LocalAddressIP4], include=[aid, ComputerName, LocalAddressIP4], strict=false)
      | match(file="aid_master_main.csv", field=[Vendor.Vendor.SourceEndpointSensorId], column=[LocalAddressIP4], include=[aid, ComputerName, LocalAddressIP4], strict=false)
      | match(file="aid_master_main.csv", field=[Vendor.TargetEndpointSensorId], column=[LocalAddressIP4], include=[aid, ComputerName, LocalAddressIP4], strict=false)

      // Ensure the required values exist.
      | aid=* ComputerName=*

      // Normalize fields as needed.
      | rename([[aid, agent.id], [Vendor.SourceEndpointSensorId, agent.id], [#Vendor, Ngsiem.event.vendor], [Vendor.threat_id, threat.indicator.name]])

      // Check if the field exists and then map the indicator name to the score.
      | threat.indicator.name=*
      | format(format="%s -> (%s)", field=[threat.indicator.name, event.severity], as=threat.indicator.name)

      // Attempt to remove any duplicates.
      | !regex("(.*->.*){2}", field=threat.indicator.name)

      // // Group the results.
      | groupBy([agent.id], function=[collect([ComputerName, Ngsiem.event.vendor, threat.indicator.name, #event.module], limit=10), count(Ngsiem.event.vendor, distinct=true, as=VendorCount), count(#event.module, distinct=true, as=ModuleCount), count(as=DetectionCount), sum("event.severity", as=TotalRiskScore)], limit=max)

      // Sort the results.
      | sort(TotalRiskScore, limit=20000)

      // Add a URL in markdown.
      | ComputerName:=format("[%s](/search/?term=_all:~'%s')", field=[ComputerName, ComputerName])
    end: now
    start: 1d
    width: 10
    y: 21
    interactions:
    - conditions: null
      name: filterClick
      titleTemplate: '{{ fields.event.category }}'
      queryString: "// Suggested go to events query - may be incorrect for complex\
        \ queries \n#type=/-ecs($|-)|^falcon-raw-data$/|case { #type=falcon-raw-data|#event_simpleName=/Detection/|#event_simpleName!=DetectionExcluded|severity!=\"\
        informational\"|#event.kind := \"alert\"|#Vendor := \"crowdstrike\"|lower(Tactic,as=event.category);#type!=falcon-raw-data|#event.kind=\"\
        alert\"}|split(event.category)|event.category=/./ | event.category=?event_category "
      useWidgetTimeWindow: true
      repoOrViewName:
      arguments:
        event_category: '["{{fields.event.category}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      cell-overflow: wrap-text
      configured-columns:
        ComputerName:
          color: '#F0424266'
        agent.id:
          render-as: go_to_events_link
      row-numbers-enabled: false
    visualization: table-view
    title: AgentId Risk Score
    isLive: false
    type: query
  02d35c48-c437-4b32-8898-a3837e1e37c5:
    x: 2
    height: 5
    queryString: |-
      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/Detection/
              | #event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/
              | severity!="informational"
              | #event.kind:="alert"
              | threat.tactic.name[0]:=Tactic
              | threat.technique.name[0]:=Technique
              | threat.technique.name[0]=/./
              | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
              | #event.kind="alert" ;
      }

      // Group the top 10 results.
      | groupBy([Technique, Tactic], function=count(#event.kind), limit=10)
    end: now
    start: 7d
    width: 10
    y: 16
    interactions:
    - conditions: null
      name: filterClick
      titleTemplate: '{{ fields.Tactic }}, {{ fields.Technique }}'
      queryString: "// Suggested go to events query - may be incorrect for complex\
        \ queries \n#type=/-ecs($|-)|^falcon-raw-data$/|case { #type=falcon-raw-data|#event_simpleName=/Detection/|#event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/|severity!=\"\
        informational\"|#event.kind := \"alert\"|threat.tactic.name[0] := Tactic|threat.technique.name[0]\
        \ := Technique|threat.technique.name[0]=/./|#Vendor := \"crowdstrike\";#type!=falcon-raw-data|#event.kind=\"\
        alert\"} | Tactic=?Tactic Technique=?Technique "
      useWidgetTimeWindow: true
      repoOrViewName:
      arguments:
        Tactic: '["{{fields.Tactic}}"]'
        Technique: '["{{fields.Technique}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      labelAngle: 30
      colorPalette: monoMagenta
      withLegendTitle: false
      labelAlign: center
      includeHistogram: false
      gapBetweenRectangles: true
    visualization: heat-map
    title: Top Tactics and Techniques
    isLive: false
    type: query
$schema: https://schemas.humio.com/dashboard/v0.16.0
